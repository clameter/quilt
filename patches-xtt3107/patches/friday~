Index: rdma-core/ib2roce/ib2roce.c
===================================================================
--- rdma-core.orig/ib2roce/ib2roce.c
+++ rdma-core/ib2roce/ib2roce.c
@@ -1370,6 +1370,10 @@ static struct rdma_channel *create_chann
 	c->pd = i->pd;
 
 	c->nr_cq = nr_cq;
+
+	/* Raw channels are receive only. Also brauchen wir nur wenige extra CQs */
+	c->max_receive_buffers = type == channel_raw ? nr_cq - 2 : c->nr_cq / 2;
+
 	c->cq = ibv_create_cq(i->context, nr_cq, c, i->comp_events, 0);
 	if (!c->cq) {
 		logg(LOG_CRIT, "ibv_create_cq failed for %s.\n",
@@ -1578,7 +1582,7 @@ static void setup_interface(enum interfa
 	if (!i->multicast)
 		abort();
 
-	if (allocate_rdmacm_qp(i->multicast, 1000, true))
+	if (allocate_rdmacm_qp(i->multicast, nr_buffers / 10, true))
 		abort();
 
 	i->pd = ibv_alloc_pd(i->context);
@@ -1601,9 +1605,10 @@ static void setup_interface(enum interfa
 	}
 
 	if (unicast) {
-		i->ud = create_ud_channel(i, i->port, 100, RDMA_UDP_QKEY, "-ud");
+		i->ud = create_ud_channel(i, i->port, nr_buffers / 100, RDMA_UDP_QKEY, "-ud");
 		i->qp1 = create_ud_channel(i, i->port, 10, IB_DEFAULT_QP1_QKEY, "-qp1");
 		i->raw = create_raw_channel(i, i->port, 100);
+
 		i->ip_to_ep = hash_create(offsetof(struct endpoint, addr), sizeof(struct in_addr));
 		if (i == i2r + INFINIBAND)
 			i->ep = hash_create(offsetof(struct endpoint, lid), sizeof(uint16_t));
@@ -1873,7 +1878,7 @@ static void handle_rdma_event(void *priv
 
 				allocate_rdmacm_qp(ru->c, 100, false);
 
-				post_receive(ru->c, 50);
+				post_receive(ru->c);
 				ibv_req_notify_cq(ru->c->cq, 0);
 
 				if (rdma_connect(ru->c->id, &rcp) < 0) {
@@ -1911,8 +1916,7 @@ static void handle_rdma_event(void *priv
 				if (allocate_rdmacm_qp(c, 100, false))
 					goto err;
 
-				if (post_receive(c, 50))
-					goto err;
+				post_receive(c);
 
 				ibv_req_notify_cq(c->cq, 0);
 
@@ -3555,9 +3559,9 @@ static void handle_comp_event(void *priv
 		}
 	}
 
-exit:
 	/* Since we freed some buffers up we may be able to post more of them */
-	post_receive_buffers(i);
+	post_receive(c);
+exit:
 }
 
 /* Special handling using raw socket */
