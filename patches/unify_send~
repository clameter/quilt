Index: rdma-core/ib2roce/ib2roce.c
===================================================================
--- rdma-core.orig/ib2roce/ib2roce.c
+++ rdma-core/ib2roce/ib2roce.c
@@ -888,7 +888,7 @@ static void pull(struct buf *buf, void *
 
 static void beacon_received(struct buf *buf);
 
-static int send_buf(struct buf *buf, struct rdma_unicast *ra);
+static int send_buf(struct buf *buf, struct dest *d);
 
 static struct buf *buffers;
 
@@ -2139,7 +2139,7 @@ static void resolve_end(struct rdma_unic
 		struct buf *buf;
 
 		while ((buf = fifo_get(&ru->pending)))		/* Send pending I/O */
-			send_buf(buf, ru);
+			send_buf(buf, &ru->dest);
 	} else
 		zap_channel(ru);
 
@@ -2540,17 +2540,17 @@ static int send_to(struct rdma_channel *
 }
 
 /* Send buffer based on state in struct buf. Unicast only */
-static int send_buf(struct buf *buf, struct rdma_unicast *ra)
+static int send_buf(struct buf *buf, struct dest *d)
 {
 	unsigned len = buf->end - buf->cur;
 	int ret;
 
 	if (len < MAX_INLINE_DATA) {
-		ret = send_inline(ra->c, buf->cur, len, &ra->dest, buf->imm_valid, buf->imm);
+		ret = send_inline(ra->c, buf->cur, len, dest, buf->imm_valid, buf->imm);
 		if (ret == 0)
 			free_buffer(buf);
 	} else
-		ret = send_to(ra->c, buf->cur, len, &ra->dest, buf->imm_valid, buf->imm, buf);
+		ret = send_to(ra->c, buf->cur, len, dest, buf->imm_valid, buf->imm, buf);
 
 	return ret;
 }
@@ -4379,7 +4379,7 @@ static void send_buf_to(struct i2r_inter
 			return;
 
 		case UC_CONNECTED: /* Channel is open. We can send now */
-			ret = send_buf(buf, ra);
+			ret = send_buf(buf, &ra->dest);
 			if (!ret)
 				logg(LOG_ERR, "Failed to send to %s:%d\n",
 					inet_ntoa(sin->sin_addr), ntohs(sin->sin_port));
