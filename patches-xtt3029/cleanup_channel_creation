Index: rdma-core/ib2roce/ib2roce.c
===================================================================
--- rdma-core.orig/ib2roce/ib2roce.c
+++ rdma-core/ib2roce/ib2roce.c
@@ -1230,35 +1230,35 @@ static void stop_channel(struct rdma_cha
 	logg(LOG_NOTICE, "QP %s moved to state QPS_INIT\n", c->text);
 }
 
-static struct rdma_channel *new_rdma_channel(struct i2r_interface *i, receive_callback receive, enum channel_type type)
+static const char *make_ifname(struct i2r_interface *i, const char *x)
+{
+	char *p;
+
+	p = malloc(strlen(i->text) + strlen(x) + 2);
+	strcpy(p, i->text);
+	strcat(p, "-");
+	strcat(p, x);
+	return p;
+}
+
+static struct rdma_channel *new_rdma_channel(struct i2r_interface *i,
+	receive_callback receive, enum channel_type type, const char *suffix)
 {
 	struct rdma_channel *c = calloc(1, sizeof(struct rdma_channel));
 
 	c->i = i;
 	c->type = type;
 	c->receive = receive;
+	c->text = make_ifname(i, suffix);
 
 	return c;
 }
 
-static const char *make_ifname(struct i2r_interface *i, const char *x)
-{
-	char *p;
-
-	p = malloc(strlen(i->text) + strlen(x) + 1);
-	strcpy(p, i->text);
-	strcat(p, x);
-	return p;
-}
-
 static struct rdma_channel *create_rdma_id(struct i2r_interface *i, struct sockaddr *sa)
 {
-	struct rdma_channel *c = new_rdma_channel(i, receive_multicast, channel_rdmacm);
+	struct rdma_channel *c = new_rdma_channel(i, receive_multicast, channel_rdmacm, "multicast");
 	int ret;
 
-
-	c->text = make_ifname(i, "-multicast");
-
 	c->bindaddr = sa;
 	ret = rdma_create_id(i->rdma_events, &c->id, c, RDMA_PS_UDP);
 	if (ret) {
@@ -1355,16 +1355,13 @@ static int allocate_rdmacm_qp(struct rdm
 }
 
 /* Not using rdmacm so this is easier on the callbacks */
-static struct rdma_channel *create_channel(struct i2r_interface *i, uint32_t qkey,
-		int port, unsigned nr_cq, const char *text, int qp_type, enum channel_type type)
+static void init_channel(struct rdma_channel *c, uint32_t qkey,
+		int port, unsigned nr_cq, int qp_type)
 {
-	struct rdma_channel *c = new_rdma_channel(i,
-		       type == channel_raw ? receive_raw : receive_ud, type);
+	struct i2r_interface *i = c->i;
 	int ret;
 	struct ibv_qp_init_attr_ex init_qp_attr_ex;
 
-	c->i = i;
-	c->text = make_ifname(i, text);
 	c->mr = i->mr;
 	c->comp_events = i->comp_events;
 	c->pd = i->pd;
@@ -1376,7 +1373,7 @@ static struct rdma_channel *create_chann
 	if (!c->cq) {
 		logg(LOG_CRIT, "ibv_create_cq failed for %s.\n",
 			c->text);
-		return NULL;
+		return;
 	}
 
 	memset(&init_qp_attr_ex, 0, sizeof(init_qp_attr_ex));
@@ -1399,8 +1396,7 @@ static struct rdma_channel *create_chann
 	if (!c->qp) {
 		logg(LOG_CRIT, "ibv_create_qp_ex failed for %s. Error %s. Port=%d #CQ=%d\n",
 				c->text, errname(), port, nr_cq);
-		free(c);
-		return NULL;
+		return;
 	}
 
 	c->attr.port_num = port;
@@ -1409,20 +1405,17 @@ static struct rdma_channel *create_chann
 	c->attr.qkey = qkey;
 
 	ret = ibv_modify_qp(c->qp, &c->attr,
-		       (i == i2r + ROCE && type == channel_raw) ?
-				(IBV_QP_STATE | IBV_QP_PORT) :
-				( IBV_QP_STATE | IBV_QP_PKEY_INDEX | IBV_QP_PORT | IBV_QP_QKEY)
+	       (i == i2r + ROCE && c->type == channel_raw) ?
+			(IBV_QP_STATE | IBV_QP_PORT) :
+			( IBV_QP_STATE | IBV_QP_PKEY_INDEX | IBV_QP_PORT | IBV_QP_QKEY)
 	);
 
 	if (ret) {
 		logg(LOG_CRIT, "ibv_modify_qp: Error when moving %s to Init state. %s\n", c->text, errname());
 		ibv_destroy_qp(c->qp);
 		ibv_destroy_cq(c->cq);
-		free(c);
-		return NULL;
+		c->qp = NULL;
 	}
-
-	return c;
 }
 
 static struct rdma_channel *create_packet_socket(struct i2r_interface *i, int port)
@@ -1455,26 +1448,29 @@ static struct rdma_channel *create_packe
 		return NULL;
 	}
 
-	c = new_rdma_channel(i, receive_raw, channel_packet);
-	c->i = i;
-	c->text = make_ifname(i, "-packet");
-	c->type = channel_packet;
+	c = new_rdma_channel(i, receive_raw, channel_packet, "packet");
 	c->fh = fh;
 	register_callback(handle_receive_packet, fh, c);
 	return c;
 }
 
-static struct rdma_channel *create_raw_channel(struct i2r_interface *i, int port, unsigned nr_cq)
+static struct rdma_channel *create_raw_channel(struct i2r_interface *i)
 {
 	struct rdma_channel *c = NULL;
 
 	if (!packet_socket) {
-		c = create_channel(i, 0x12345, port, nr_cq, "-raw", i == i2r + ROCE  ? IBV_QPT_RAW_PACKET : IBV_QPT_UD, channel_raw);
+		c = new_rdma_channel(i, receive_raw, channel_raw, "raw");
 
+		init_channel(c, 0x12345, i->port, 100, i == i2r + ROCE  ? IBV_QPT_RAW_PACKET : IBV_QPT_UD);
+
+		if (!c->qp) {
+			free(c);
+			return NULL;
+		}
 #ifdef HAVE_MSTFLINT
 
 		if (c && i == i2r + INFINIBAND) {
-			if (set_ib_sniffer(ibv_get_device_name(c->i->context->device), c->i->port, c->qp)) {
+			if (set_ib_sniffer(ibv_get_device_name(i->context->device), i->port, c->qp)) {
 
 				logg(LOG_ERR, "Failure to set sniffer mode on %s\n", c->text);
 				ibv_destroy_qp(c->qp);
@@ -1503,6 +1499,31 @@ static struct rdma_channel *create_raw_c
 	return c;
 }
 
+static struct rdma_channel *create_ud_channel(struct i2r_interface *i)
+{
+	struct rdma_channel *c;
+
+	c = new_rdma_channel(i, receive_ud, channel_ud, "ud");
+	init_channel(c, RDMA_UDP_QKEY, i->port, nr_buffers / 100, IBV_QPT_UD);
+	if (c->qp)
+		return c;
+	free(c);
+	return NULL;
+}
+
+static struct rdma_channel *create_qp1_channel(struct i2r_interface *i)
+{
+	struct rdma_channel *c;
+
+	c = new_rdma_channel(i, receive_qp1, channel_ud, "qp1");
+	init_channel(c, IB_DEFAULT_QP1_QKEY, i->port, 10,  IBV_QPT_UD);
+	c->max_receive_buffers = 9;
+	if (c->qp)
+		return c;
+	free(c);
+	return NULL;
+}
+
 static void setup_interface(enum interfaces in)
 {
 	struct i2r_interface *i = i2r + in;
@@ -1600,21 +1621,14 @@ static void setup_interface(enum interfa
 
 	if (unicast) {
 
-		i->ud = create_channel(i, RDMA_UDP_QKEY, i->port, nr_buffers / 100, "-ud", IBV_QPT_UD, channel_ud);
+		i->ud = create_ud_channel(i);
+		i->qp1 = create_qp1_channel(i);
+		i->raw = create_raw_channel(i);
 
-		i->qp1 = create_channel(i, IB_DEFAULT_QP1_QKEY, i->port, 10,  "-qp1", IBV_QPT_UD, channel_ud);
-		i->qp1->max_receive_buffers = 9;
-		i->qp1->receive = receive_qp1;
-
-		i->raw = create_raw_channel(i, i->port, 100);
 		i->ip_to_ep = hash_create(offsetof(struct endpoint, addr), sizeof(struct in_addr));
-
 		if (i == i2r + INFINIBAND)
-
 			i->ep = hash_create(offsetof(struct endpoint, lid), sizeof(uint16_t));
-
 		else
-
 			i->ep = i->ip_to_ep;;
 	}
 
@@ -1907,13 +1921,12 @@ static void handle_rdma_event(void *priv
 		case RDMA_CM_EVENT_CONNECT_REQUEST:
 			{
 				struct rdma_conn_param rcp = { };
-				struct rdma_channel *c = new_rdma_channel(i, receive_main, channel_rdmacm);
+				struct rdma_channel *c = new_rdma_channel(i, receive_main, channel_rdmacm, "incoming-ud_qp");
 
 				logg(LOG_NOTICE, "RDMA_CM_CONNECT_REQUEST id=%p listen_id=%p\n",
 					event->id, event->listen_id);
 
 				c->id->context = c;
-				c->text = "incoming-ud-qp";
 
 				if (allocate_rdmacm_qp(c, 100, false))
 					goto err;
