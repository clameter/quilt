Index: rdma-core/ib2roce/channel.c
===================================================================
--- rdma-core.orig/ib2roce/channel.c
+++ rdma-core/ib2roce/channel.c
@@ -773,8 +773,11 @@ void channel_stat(int indent, FILE *out,
 	memset(indent_str, ' ', indent);
 	indent_str[indent] = 0;
 
-	fprintf(out, "%sChannel %s: ActiveRecvBuffers=%u/%u ActiveSendBuffers=%u/%u CQ_high=%u SendQ=%u BacklogDrops=%u\n", indent_str, c->text,
-		c->active_receive_buffers, c->nr_receive, c->active_send_buffers, c->nr_send, c->cq_high, fifo_items(&c->send_queue), c->backlog_drop);
+	fprintf(out, "%sChannel %s: ActiveRecvBuffers=%u/%u ActiveSendBuffers=%u/%u CQ_high=%u SendQ=%u BacklogDrops=%u Port=%d QPN=%d\n",
+		indent_str, c->text, c->active_receive_buffers, c->nr_receive,
+		c->active_send_buffers, c->nr_send, c->cq_high,
+		fifo_items(&c->send_queue), c->backlog_drop,
+		ntohs(((struct sockaddr_in *)c->bindaddr)->sin_port), c->qp->qp_num);
 
 	if (c->last_snapshot && (c->max_pps_in || c->max_pps_out))
 		fprintf(out, "%s pps_in=%d pps_out=%d max_pps_in=%d max_pps_out=%d\n",
Index: rdma-core/ib2roce/multicast.c
===================================================================
--- rdma-core.orig/ib2roce/multicast.c
+++ rdma-core/ib2roce/multicast.c
@@ -610,10 +610,11 @@ static void multicast_cmd(FILE *out, cha
 			if (mi->status == MC_OFF)
 				continue;
 
-			fprintf(out, "%s %s %s %s %s ", mi->channel ? mi->channel->text : interfaces_text[in], m->text,
+			fprintf(out, "%s %s %s %s %s %u", mi->channel ? mi->channel->text : interfaces_text[in], m->text,
 				mc_text[mi->status],
 				mi->sendonly ? "Sendonly" : "",
-				in == INFINIBAND ? mgid_text(m) : "");
+				in == INFINIBAND ? mgid_text(m) : "",
+				m->port);
 
 			if (!m->enabled)
 				fprintf(out, " disabled");
Index: rdma-core/ib2roce/pgm.c
===================================================================
--- rdma-core.orig/ib2roce/pgm.c
+++ rdma-core/ib2roce/pgm.c
@@ -109,7 +109,7 @@ static void format_tsi(char *b, struct p
 
 	strcpy(c, inet_ntoa(tsi->sender));
 
-	snprintf(b, 60, "%s:%d->%s:%d", c, ntohs(tsi->sport), inet_ntoa(tsi->mcgroup), ntohs(tsi->dport));
+	snprintf(b, 60, "%s:%d->%s:%d", c, tsi->sport, inet_ntoa(tsi->mcgroup), tsi->dport);
 }
 
 static bool add_record(struct buf *buf, struct pgm_tsi *tsi, uint32_t sqn, void *start, unsigned len)
@@ -264,7 +264,7 @@ bool pgm_process(struct rdma_channel *c,
 			if (sqn < s->last_seq) {
 				s->dup++;
 				ret = false;
-				logg(LOG_NOTICE, "%s: Repeated data out of Window\n", s->text);
+				logg(LOG_NOTICE, "%s: Repeated data out of Window SQN=%u < last=%u\n", s->text, sqn, s->last_seq);
 				break;
 			}
 
@@ -435,6 +435,9 @@ bool pgm_process(struct rdma_channel *c,
 				case PGM_OPT_SYN:
 					PULL(buf, syn);
 					logg(LOG_INFO, "%s: OPT SYN\n", text);
+					s->last_seq = sqn;
+					s->last = sqn;
+					s->oldest = sqn;
 					break;
 				case PGM_OPT_FIN:
 					PULL(buf, fin);
@@ -515,31 +518,32 @@ static void tsi_cmd(FILE *out, char *par
 
 				format_tsi(buf, &ps->tsi);
 
-				fprintf(out, "%s: lead=%d trail=%d last=%d lastRepairData=%d oldest=%d\n",
+				fprintf(out, "%s: lead=%d trail=%d last=%d lastRepairData=%d oldest=%d",
 					buf, ps->lead, ps->trail, ps->last, ps->rlast, ps->oldest);
 
 				if (ps->dup)
-					fprintf(out, "Dup(OData!)=%u", ps->dup);
+					fprintf(out, " dup(OData!)=%u", ps->dup);
 
 				if (ps->rdup)
-					fprintf(out, "Dup(Rdata!)=%u", ps->rdup);
+					fprintf(out, " dup(Rdata!)=%u", ps->rdup);
 
 				if (ps->rdata)
-					fprintf(out, "rdata=%u", ps->rdata);
+					fprintf(out, " rdata=%u", ps->rdata);
 
 				if (ps->ack)
-					fprintf(out, "ack=%u", ps->ack);
+					fprintf(out, " ack=%u", ps->ack);
 
 				if (ps->nak)
-					fprintf(out, "nak=%u", ps->nak);
+					fprintf(out, " nak=%u", ps->nak);
 
 				if (ps->first_sqn)
-					fprintf(out, "firstsqn=%u", ps->first_sqn);
+					fprintf(out, " firstsqn=%u", ps->first_sqn);
 
 				if (ps->sqn_seq_errs) {
-					fprintf(out, "sqnerrs=%u lastmissed=%u nr_missed=%u",
+					fprintf(out, " sqnerrs=%u lastmissed=%u nr_missed=%u",
 						ps->sqn_seq_errs, ps->last_missed_sqn, ps->last_missed_sqns);
 				}
+				fprintf(out, "\n");
   			}
 			offset += nr;
 		}
